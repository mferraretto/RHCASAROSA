
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function userRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    function isAdmin(){ return isSignedIn() && userRole() in ['ADM','Gestor','RH']; }
    function isSelf(uid){ return isSignedIn() && uid == request.auth.uid; }

    match /users/{uid} {
      allow read: if isSignedIn() && (isSelf(uid) || isAdmin());
      allow write: if isAdmin() || isSelf(uid);
    }

    match /employees/{id} {
      allow read: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow update: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid && !request.resource.data.diff(resource.data).changedKeys().hasAny(['salary','role','status','costCenter']));
      allow create, delete: if isAdmin();
    }

    match /attendance/{id} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    match /vacations/{id} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    match /documents/{id} {
      allow read: if isAdmin() || (isSignedIn() && resource.data.employee == request.auth.token.email);
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
    }

    match /holerites/{id} {
      allow read: if isAdmin() || (isSignedIn() && (resource.data.uid == request.auth.uid || resource.data.email == request.auth.token.email));
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
    }

    match /jobs/{id} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /candidates/{id} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /goals/{id} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
  }
}
